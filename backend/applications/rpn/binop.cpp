#include <vector>
#include <stack>
#include "include/binop.hpp"
#include "circuit.hpp"
#include "simple-circuits.hpp"
#include "circuit-util.hpp"
#include "context.hpp"

using namespace std;

BinOp::BinOp(binoptype binopt) {
    btp = binopt;
}

void BinOp::handleOp(vector<int> &ptvec, stack<Circuit> &s) {
    if (s.size() < 2) {
        throw runtime_error("Stack has not enough input for binary gate."); // TODO: implement meaningful error
    }

    Circuit bc; // generate and select the circuit with the binary operation (the gate), which determines the computation
    switch (btp) {
        case binoptype::Add:
            bc = single_binary_gate_circuit(Gate::Add);
            break;
        case binoptype::Subtract:
            bc = single_binary_gate_circuit(Gate::Subtract);
            break;
        case binoptype::Multiply:
            bc = single_binary_gate_circuit(Gate::Multiply);
            break;
        case binoptype::Divide:
            throw GateNotImplemented();
        default:
            throw GateNotImplemented();
            break;
    }
    Circuit l;
    Circuit r;
    r = s.top(); // the right circuit in the parallel circuit generated by par(l,r) is the first to pop
    s.pop();
    l = s.top();
    s.pop();
    Circuit combc = seq(par(l, r), bc); // feed the previous two circuits into this circuit and push on stack.
    s.push(combc);
}